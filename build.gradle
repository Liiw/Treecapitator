import groovy.json.JsonOutput
import groovy.json.JsonSlurper

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

compileJava.options.encoding = 'UTF-8'

repositories {
    flatDir {
          dirs = ["${projectDir}/lib","${projectDir}/../LocalRepos"]
        }
    ivy {
        url "http://twisted.nfshost.com/"
        layout "pattern", {
            artifact "bspkrscore/deobf/[module]-[revision]-deobf.[ext]"
        }
    }
}

dependencies {
    compile name: "[${project.minecraft_version}]bspkrscore", version: "${project.bscore_version}", classifier:"deobf", ext: 'jar'
}

group = project.group_name
version = project.mod_version
archivesBaseName = "[${project.minecraft_version}]${project.mod_id}"

minecraft {
    version = project.minecraft_version + '-' + project.forge_version // grab latest forge
    mappings = project.mappings_version
    runDir = 'run'
    replace '@MOD_ID@', project.mod_id
    replace '@MOD_NAME@', project.mod_name
    replace '@MOD_VERSION@', project.mod_version
    replace '@JSON_URL@', project.forgeupdate_url

    replaceIn 'Reference.java'
}

processResources {
    // replace stuff in the files we want.
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        // replaces
        expand ([
            'mod_version': version,
            'bscore_version': project.bscore_version,
            'forge_version': project.forge_version,
            'minecraft_version': project.minecraft_version
        ])
    }

    // copy everything else that we didnt do before
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
    }
}

jar {
    classifier = 'universal'
}

sourceJar {
    classifier = 'src'
}

artifacts {
    archives sourceJar
}

task updateJson {
    def fileName = new File('forgeupdate/forgeupdate.json')
    def fujson = new JsonSlurper().parseText(fileName.text)

    doLast {
        //update update-URL
        fujson['homepage'] = project.forgeupdate_url

        //update promoted versions
        def lateststr = project.minecraft_version + '-latest'
        fujson['promos'][lateststr] = project.mod_version.toString()
        def recomstr = project.minecraft_version + '-recommended'
        fujson['promos'][recomstr] = project.mod_version.toString()

//    //update version notes
//    relnote = "Get this from git or something"
//    fujson[project.minecraft_version][project.mod_version] = relnote

        def jsOut = JsonOutput.toJson(fujson)
        fileName.write(JsonOutput.prettyPrint(jsOut))
    }
}

build.finalizedBy updateJson

uploadArchives {
    repositories {
        flatDir {
            dirs "${projectDir}/../LocalRepos"
        }
    }

    dependsOn 'build'
    mustRunAfter 'build'
}

idea {
    module {
        inheritOutputDirs = true
    }
}
